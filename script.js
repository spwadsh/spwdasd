const taskList = document.getElementById("taskList");
    const pointsDisplay = document.getElementById("points");
    const gachaDisplay = document.getElementById("gachaPoints");
    const resetTimer = document.getElementById("resetTimer");
    const rewardMessage = document.getElementById("rewardMessage");
    const progressBar = document.getElementById("progressBar");

    const tasks = [
      { name: "H·ªçc b√†i 1 ti·∫øng", points: 100 },
      { name: "Gi·∫£i b√†i t·∫≠p to√°n", points: 200 },
      { name: "Xem video h·ªçc t·∫≠p", points: 150 },
      { name: "Th·ª±c h√†nh l·∫≠p tr√¨nh", points: 250 },
      { name: "ƒê·ªçc s√°ch 30 ph√∫t", points: 100 },
      { name: "Tham gia th·∫£o lu·∫≠n nh√≥m", points: 300 },
      { name: "Ho√†n th√†nh b√†i ki·ªÉm tra", points: 500 },
      { name: "Gi√∫p b·∫°n b√® h·ªçc b√†i", points: 200 },
      { name: "Th·ª±c hi·ªán d·ª± √°n nh·ªè", points: 400 },
      { name: "Tham gia ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", points: 300 }
    ];

    let state = {
      points: 0,
      gacha: 0,
      completedTasks: 0,
      lastReset: 0,
      taskSubset: [],
      completedTaskFlags: [],
      lastLoginDate: "",
      taskHistory: [],
      gachaHistory: []
    };

    function saveState() {
      localStorage.setItem("learningApp", JSON.stringify(state));
    }

    function loadState() {
      const data = localStorage.getItem("learningApp");
      if (data) {
        state = JSON.parse(data);
      } else {
        state = {
          points: 0,
          gacha: 0,
          completedTasks: 0,
          lastReset: Date.now(),
          taskSubset: shuffleArray(tasks).slice(0, 5),
          completedTaskFlags: Array(5).fill(false),
          lastLoginDate: "",
          taskHistory: [],
          gachaHistory: []
        };
        saveState();
      }
      updateUI();  // ‚úÖ G·ªçi duy nh·∫•t t·∫°i ƒë√¢y ƒë·ªÉ v·ª´a c·∫≠p nh·∫≠t ƒëi·ªÉm, v·ª´a render nhi·ªám v·ª•
    }
    
    
    
    function updateUI() {
      pointsDisplay.textContent = state.points;
      gachaDisplay.textContent = state.gacha;
      progressBar.value = state.points;
      rewardMessage.textContent = state.points >= 1000 ? "üéâ B·∫°n ƒë√£ ƒë·∫°t m·ªëc 1000 ƒëi·ªÉm!" : "";
      updateResetTimer();
      createTasks(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch nhi·ªám v·ª• t·∫°i ƒë√¢y
    }
    
    
    

    function createTasks() {
      const taskList = document.getElementById("taskList");
      taskList.innerHTML = "";
    
      state.taskSubset.forEach((task, i) => {
        const li = document.createElement("li");
        li.textContent = task.name;
    
        // N·∫øu ƒë√£ ho√†n th√†nh th√¨ kh√¥ng t·∫°o n√∫t
        if (state.completedTaskFlags[i]) {
          li.classList.add("completed");
        } else {
          const btn = document.createElement("button");
          btn.textContent = `‚úÖ +${task.points}`;
          
          btn.addEventListener("click", () => {
            if (!state.completedTaskFlags[i]) {
              state.points += task.points;
              state.completedTaskFlags[i] = true;
              state.completedTasks++;
              
              saveState();
              updateUI(); // G·ªçi updateUI ƒë·ªÉ l√†m m·ªõi giao di·ªán
              playSound("task-complete.mp3"); // n·∫øu c√≥ √¢m thanh
            }
          });
    
          li.appendChild(btn);
        }
    
        taskList.appendChild(li);
      });
    }
      function updateResetTimer() {
      const nextReset = state.lastReset + 3600000; // C·ªông 1 gi·ªù v√†o th·ªùi ƒëi·ªÉm reset cu·ªëi c√πng
      const remaining = Math.max(0, nextReset - Date.now()); // T√≠nh th·ªùi gian c√≤n l·∫°i
      const minutes = String(Math.floor(remaining / 60000)).padStart(2, "0"); // T√≠nh ph√∫t
      const seconds = String(Math.floor((remaining % 60000) / 1000)).padStart(2, "0"); // T√≠nh gi√¢y
      resetTimer.textContent = `${minutes}:${seconds}`;
    
      // N·∫øu ƒë√£ qua 1 gi·ªù, reset l·∫°i nhi·ªám v·ª• v√† th·ªùi gian
      if (remaining <= 0) {
        state.lastReset = Date.now(); // C·∫≠p nh·∫≠t l·∫°i th·ªùi gian reset
        state.taskSubset = shuffleArray(tasks).slice(0, 5);  // L·∫•y l·∫°i danh s√°ch nhi·ªám v·ª• ng·∫´u nhi√™n
        state.completedTaskFlags = Array(5).fill(false);    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ho√†n th√†nh
        saveState();
        createTasks();  // T·∫°o l·∫°i danh s√°ch nhi·ªám v·ª•
        updateUI();
      }
      setTimeout(updateResetTimer, 1000); // C·∫≠p nh·∫≠t l·∫°i m·ªói gi√¢y
    }
    
    function saveState() {
      localStorage.setItem("learningApp", JSON.stringify(state));
    }
    

    document.getElementById("resetTasksBtn").onclick = () => {
      if (state.points >= 750) {
        state.points -= 750;
        state.taskSubset = shuffleArray(tasks).slice(0, 5);  // Ch·ªçn l·∫°i nhi·ªám v·ª• ng·∫´u nhi√™n
        state.completedTaskFlags = Array(5).fill(false);    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ho√†n th√†nh
        createTasks();  // T·∫°o l·∫°i danh s√°ch nhi·ªám v·ª•
        saveState();
        updateUI();
        playSound("reset.mp3");
        alert("üéâ Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c reset!");
      } else {
        alert("‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ reset nhi·ªám v·ª•!");
      }
    };
    document.getElementById("dailyLoginBtn").onclick = () => {
      const today = new Date().toLocaleDateString();
      if (state.lastLoginDate !== today) {
        state.points += 300;
        state.lastLoginDate = today;
        saveState();
        updateUI();
        playSound("daily-login.mp3");
        alert("üéâ B·∫°n ƒë√£ nh·∫≠n ƒëi·ªÉm ƒëƒÉng nh·∫≠p h√†ng ng√†y!");
      } else {
        alert("‚ö†Ô∏è B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p h√¥m nay r·ªìi!");
      }
    };
    document.getElementById("convert500ToGachaBtn").onclick = () => {
      if (state.points >= 500) {
        state.points -= 500;
        state.gacha += 250;
        saveState();
        updateUI();
        playSound("points-convert.mp3");
        alert("‚úÖ B·∫°n ƒë√£ ƒë·ªïi 500 ƒëi·ªÉm l·∫•y 250 ƒëi·ªÉm Gacha!");
      } else {
        alert("‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi!");
      }
    };
    document.getElementById("convertPointsBtn").onclick = () => {
      if (state.points >= 10) {
        state.points -= 10;
        state.gacha += 5;
        saveState();
        updateUI();
        playSound("points-convert.mp3");
        alert("‚úÖ B·∫°n ƒë√£ ƒë·ªïi 10 ƒëi·ªÉm l·∫•y 5 ƒëi·ªÉm Gacha!");
      } else {
        alert("‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi!");
      }
    };
    document.getElementById("gachaBtn").onclick = () => {
      if (state.gacha >= 250) { // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒë·ªß ƒëi·ªÉm kh√¥ng
        state.gacha -= 250;  // Tr·ª´ ƒëi·ªÉm khi quay
        //state.gacha++;  // TƒÉng s·ªë l·∫ßn quay Gacha
        saveState();  // L∆∞u tr·∫°ng th√°i
        updateUI();  // C·∫≠p nh·∫≠t l·∫°i UI
    
        playSound("gacha-spin.mp3"); // Ph√°t √¢m thanh quay Gacha (n·∫øu c√≥)
        alert("üéâ B·∫°n ƒë√£ quay Gacha th√†nh c√¥ng!");
    
        // M√¥ ph·ªèng ph·∫ßn th∆∞·ªüng ng·∫´u nhi√™n
        const rewards = ["50 ƒëi·ªÉm", "100 ƒëi·ªÉm", "150 ƒëi·ªÉm"];
        const reward = rewards[Math.floor(Math.random() * rewards.length)];
        alert(`Ph·∫ßn th∆∞·ªüng: ${reward}`);
        
        // C·∫≠p nh·∫≠t ƒëi·ªÉm sau khi quay
        if (reward === "50 ƒëi·ªÉm") {
          state.points += 50;
        } else if (reward === "100 ƒëi·ªÉm") {
          state.points += 100;
        } else if (reward === "150 ƒëi·ªÉm") {
          state.points += 150;
        }
    
        saveState();
        updateUI();
      } else {
        alert("‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ quay Gacha!");
      }
    };
    
    
    
    

    function playSound(filename) {
      const audio = new Audio(`sounds/${filename}`);
      audio.play();
    }

    function toggleDarkMode() {
      document.body.classList.toggle("dark-mode");
    }

    function shuffleArray(array) {
      return array.sort(() => Math.random() - 0.5);
    }

    loadState();
    
    createTasks();
    updateUI();
    updateResetTimer();
